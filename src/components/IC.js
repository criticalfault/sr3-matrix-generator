import React,{ useState } from 'react';
import Button from 'react-bootstrap/Button';
import Modal from 'react-bootstrap/Modal';
import './IC.css';
const IC = (props) => {
    const [show, setShow] = useState(false);
    const handleClose = () => setShow(false);
    const handleShow = () => setShow(true); 
    const [ICOptions, setICOptions] = useState();

    const ICOptionsDescription = {
        
    }
    const ICTypes = {
        "Probe":"Probe IC is reactive IC that conducts additional interrogations of data packets and program requests for computer resources. Probe IC helps detect any operations performed by unauthorized programs. For a probe-equipped system, the gamemaster makes a Probe Test using its probe IC Rating against a decker's Detection Factor every time the decker makes a System Test. Add any successes from the Probe Test to the decker's security tally.",
        "Scout":"Scout IC is a proactive variant of probe IC (p. 228, SR3). When scout IC is triggered, it acts as reactive probe IC: the gamemaster uses the IC's rating to make a test against the intruder's Detection Factor anytime the intruder makes a System Test. Any successes from these tests are added to the intruder's security tally.\n Unlike probe IC, however, scout IC switches into a proactive mode when attacked in cybercombat or when a passive or active alert is triggered. In this mode, scout IC no longer probes the intruder like probe IC but actively defends itself in cybercombat, using the standard cybercombat rules. Proactive scout IC also makes probing Attack Tests against intruders. These attacks do not inflict damage by themselves but enhance attacks by other IC in the system. Each attack success achieved by the scout IC adds 1 die to the Security Value for the next attack made against the intruder by any other piece of proactive IC. Successes achieved from additional probing attacks add cumulative dice, up to a maximum equal to the scout IC's rating.",
        "Killer":"Killer IC is proactive IC that causes damage to icons in cybercombat. All killer IC has a Damage Code and its Power is equal to its IC Rating. The Damage Level of killer IC is based on the host's security code. Killer IC on Blue or Green systems does Medium damage; killer IC on Orange and Red systems does Serious damage. For example, Killer-6 IC on an Orange host would do 6S damage. This damage rises a stage for every 2 successes achieved on the host's Attack Test, just like damage in standard combat. If an attack from killer IC fills the Condition Monitor of a decker, the decker is dumped. Armor utility programs (p. 222) reduce damage from killer IC.",
        "Crippler":"Cripplers are proactive white IC programs that each attack one of the decker's icon's Attributes. Cripplers come in four types: acid, binder, jammer, or marker programs. Acid cripplers attack an icon's Bod Rating. Binder cripplers attack an icon's Evasion Rating. Jammer cripplers attack the Sensor Rating, and marker cripplers attack the Masking Rating. Whenever a crippler program attacks an icon, they engage in a Success Contest. The gamemaster makes an Attack Test for the host and tallies the successes (see Cybercombat, p. 222, for details on Attack Tests). At the same time, the decker makes a test using the af ed icon Attribute against a target number equal to the crippler IC's Rating. If the decker achieves a greater or equal number of successes, the IC does no damage. Reduce the affected icon attribute by 1 point for every 2 net successes the IC scores. Yes, that means 1 net success for the IC does no damage. Two successes do 1 point of damage, four successes do 2 points, and so on. Neither Armor nor Hardening (see pp. 222 and 206) protect against cripplers. Crippler IC cannot reduce an icon Attribute below 1.",
        "Scramble":"Scramble IC is reactive IC used to protect elements of a host's Access, Files, or Slave subsystems. Scramble IC can be programmed to protect a specific component of a subsystem or the entire subsystem. For example, scramble IC can protect an individual data file, a datastore, or all the Files functions on a host—including faxprinter output and dedicated terminals. Similarly, scramble IC on an Access subsystem can oppose logons from specific entry points, such as public grids and dedicated workstations, or all logons. On a Slave subsystem, scramble IC can defend specific remote devices or all devices connected to the subsystem. Scramble IC programs are designed to make it impossible to Access any host or slave devices they protect, unless it is decrypted. Additionally, scramble IC will destroy the data under its care rather than letting it fall into unauthorized hands. If the decker tries to decrypt scramble IC and fails, the gamemaster makes a Scramble Test using its Rating against a target number equal to the decker's Computer Skill. If the test fails, the decker has managed to suppress the scramble IC's destruct code. If the test succeeds, the data is destroyed. Deckers may use specific system operations to defeat scramble IC, all of which can be augmented by the decryption utility program (see System Operations, p. 214). Decrypting scramble IC does not add to the decker's security tally. Deckers can use attack programs to crash scramble IC, but doing so will increase the decker's security tally unless he suppresses the scramble IC.",
        "Tar Baby":"Rar baby is reactive IC that attempts to crash deckers' utility programs. Each tar baby is pre-programmed to target a specific type of utility (operational, offensive, defensive, special), determined by the gamemaster. Tar baby IC does not attack completely passive utilities such as armor and sleaze programs. Whenever a decker uses one of the trigger utilities, the gamemaster makes an Opposed Test between the two programs' ratings. Make the Tar Baby Test against a target number equal to the utility program's rating. Make the Utility Test against a target number equal to the tar baby IC's Rating. If the tar baby wins the Opposed Test, it crashes both itself and the utility program. Tar baby IC does not increase the decker's security tally when it crashes this way. The decker has to load a fresh copy of the utility program with a Swap Memory operation. If the utility wins the Opposed Test, it remains safe and the gamemaster makes a secret Sensor Test to determine if the decker notices the tar baby IC (see Noticing Triggered IC, p. 209).",
        "Blaster":"Blaster IC is proactive IC that attacks in cybercombat in the same manner as killer IC (see Killer IC, above). Armor reduces damage from blaster attacks. Additionally, blaster IC may permanently damage a decker's MPCP if it crashes his icon. If blaster IC dumps a decker, make a Blaster Test using its Rating against a target number equal to the deck's MPCP Rating. Hardening increases the target number but armor has no effect. Reduce the MPCP Rating by 1 point for every 2 successes on the Blaster Test. Note that the decker may need to crank down his persona programs if his deck takes damage, because their total ratings may not exceed the deck's MPCP Rating multiplied by 3.",
        "Ripper":"Ripper IC is a gray version of crippler IC. This proactive IC attacks in the same manner (see Cripplers, p. 227). In addition, whenever a ripper program reduces an icon Attribute to zero, make a Ripper Test using its rating against a target number equal to the deck's MPCP Rating (Hardening increases the target number). For every 2 successes on this test, reduce the rating of the MPCP by 1. Replacing the MPCP is the only way to restore this damage.",
        "Sparky":"The proactive IC called sparky IC attacks in the same manner as Killer IC (see Killer IC, p. 228). However, if sparky IC crashes the persona, it causes an overload in the deck's power supply that feeds random jolts of electricity to the MPCP and the decker's brain. Results can range from a little impromptu electroshock therapy to a killing jolt. This is dark gray IC indeed—bordering on black—but because it is not designed to deliberately cause physical trauma,it is technically considered non-lethal. Whenever sparky IC crashes a persona, make a Sparky Test against a target number equal to the deck's MPCP Rating + 2. Hardening increases the target number. Reduce the MPCP Rating by 1 point for every 2 successes of the Sparky Test. A sparky attack also causes (IC Rating)M damage to the decker. Stage the Damage up one level for every 2 successes on the Sparky Test. The decker resists this damage as he would any other. Hardening reduces the Power of the damage.",
        "Tar Pit":"The reactive IC known as tar pit IC operates and attacks in the same manner as tar baby IC (see Tar Baby, p. 228). However, if tar pit IC trashes a utility on-line, it also injects the deck with viral code that corrupts all copies of the program in the deck's active and storage memories. Unless the decker has a backup copy of the utility stashed in off-line memory, he's lost it for good. And even if he has a backup, he can't get at it for the rest of the run. When tar pit IC trashes a program, make a Tar Pit Test against a target number equal to the deck's MPCP Rating. Hardening increases the target number. If the test produces no successes, the viral code is defeated and the tar pit IC has the same effect as the tar baby program, so the decker can reload his utility with a Swap Memory operation. If the Tar Pit Test produces any successes, however, the IC corrupts all copies of the program stored on the deck. The decker cannot get the utility back until he jacks out and reloads the utility from a source outside his deck (from a storage chip, most likely).",
        "Psychotropic Black IC":"",
        "Lethal Black IC":"",
        "Non-Lethal Black IC":"",
        "Construct":""
    };

return (
    <div className='mb-2'>
        <Button className="ICButton" variant="primary" onClick={handleShow}>{props.ICStep}: {props.ICName}</Button>
        <Modal show={show} onHide={handleClose}>
            <Modal.Header closeButton>
                <Modal.Title>{props.ICName}</Modal.Title>
            </Modal.Header>
            <Modal.Body>{props.ICDescription}</Modal.Body>
            <Modal.Footer>
                <Button variant="secondary" onClick={handleClose}>Close</Button>
            </Modal.Footer>
        </Modal>
    </div>);
}

export default IC;